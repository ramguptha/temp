#define SYNC_SERVICE_PORT_NUMBER "9668"
#define WEB_SSL_PORT_NUMBER "443"
#define API_NONSSL_PORT_NUMBER "8080"
#define API_SSL_PORT_NUMBER "8443"
#define WEB_SITE_NAME "AmWebUi"
#define CERTIFICATE_STORE_NAME "MY"
#define ABSOLUTE_SOFTWARE "Absolute Software"
#define MIN_DOMAIN_LENGTH 5
#define MIN_IP_LENGTH 7
#define TOMCAT8_SERVICE_NAME "Tomcat8"
#define TOMCAT7_SERVICE_NAME "Tomcat7"
#define KEYSTORE_PASSWORD "@bs0lute"
#define BTN_BACK 12
#define BTN_NEXT 1
#define BTN_CANCEL 24
#define BTN_CLOSE 2

//#define IP_ADDRESS_PATTERN "^(?:\\d{1,3}\\.){3}\\d{1,3}$"
//#define DOMAIN_NAME_PATTERN "^([a-zA-Z0-9]([a-zA-Z0-9\\\\-]{0,65}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,6}$"


// Global variables

NUMBER nResult, nSetupType, nvSize, nvFileHandle, nReturn, nState, nLineNumber, nIndex, nvServiceState;
STRING szTitle, szFormat, szMsg, svName, svCompany, szDomainName, szIP, szIpOld, szIpNew, szDomainNameInput, szIPInput;
STRING pathOfSetup, szCommand, szSource, szTarget, szTempFolder, szReturnLine, szString;
STRING szValue, szProgram, szPath, szProductPath, szParam, szExec, szArgs, szMsg1, szMsg2, szXmlFilePath, szScriptPath, szJavaFullPath;
STRING szDefCertPath, szResultCertPath, szResultCertFile, szDefaultAmWebPath, szResultConfigPath, szResultAmWebPath, szTargetInstallDataPath;
STRING szTargetViewConfigPath, szTargetCertificatePath;
STRING szTargetTempUploadPath, szShortcutPath, szShortcutText, szShortcutTarget, szTargetSettingsPath;
STRING szTargetUserPrefsDbFilePath, szTargetSyncServicePort, szTargetSyncServiceNotificationUrl, szTomcatPort;
STRING szTargetLogbackPath, szTargetLogbackFilePath, szTargetUserPrefsPath, szTomcatWebappsPath, szTomcatWebappsLibPath, szTomcatConf;
STRING szTargetAmSyncPath, szTargetAmSyncPath64, szTargetAmConfigurationToolPath, szFolder;
STRING szJavaHome, szTomcat, szTomcat7, szTomcatServicePath, szTomcat7WebappsPath, szRegKey, szServiceName;
BOOL bCustom, bIgnore1, bIgnore2, bFirstTimeInstall, bValidUserInput;
// FileBrowseDlg requires the szFile parameter be explicitly sized
// and that the size be passed as the second parameter.
STRING szFile[512], svDir, svFileList, svTemp, szWebXmlFile, szWebXmlFilePath;
BOOL bMultiSel, bDerefLinks, bTomcat7Present;
LIST listFiles, listDescriptions, listTopics;


// Included header files ----------------------------------------------------
#include "ifx.h"

// Note: In order to have your InstallScript function executed as a custom
// action by the Windows Installer, it must be prototyped as an 
// entry-point function.

// The keyword export identifies MyFunction() as an entry-point function.
// The argument it accepts must be a handle to the Installer database.
    
/* export prototype MyFunction(HWND); */

#include "RetrieveDirs.rul"
//
#include "ApplySecurityPolicies.rul"
//
#include "CreateFolder.rul"
//
#include "TextFunctions.rul"
//
#include "PathVarSetup.rul"
// 
#include "InstallFunctions.rul"
//
#include "FeatureEvents.rul"
//


//---------------------------------------------------------------------------
// OnBegin
//
// The OnBegin event is called directly by the framework after the setup
// initializes.
//---------------------------------------------------------------------------
function OnBegin()
begin
	// TO DO: you may change default non-UI setting, for example
	//
	// You may also perform your custom initialization steps, check requirements, etc.
	szProductPath = PROGRAMFILES64^ABSOLUTE_SOFTWARE^WEB_SITE_NAME;
	
end;


prototype int msi.MsiQueryProductStateA(byval string);
function OnAppSearch( )

begin
	//if version 1.0.4 is installed - prompt to uninstall it first
	if (MsiQueryProductStateA("{3EF700C3-C5A8-4625-81BE-533040C59144}") = 5) then
		MessageBox(@ID_STRING_UNINSTALL_OLD_AM_WEB_ADMIN, WARNING);
		abort;
	endif;
end;


//---------------------------------------------------------------------------
// OnFirstUIBefore
//
// The OnFirstUIBefore event is called by the framework when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//---------------------------------------------------------------------------
function OnFirstUIBefore()


begin	
    // TO DO: if you want to enable background, window title, and caption bar title                                                                   
    // SetTitle( @PRODUCT_NAME, 24, WHITE );                                        
    // SetTitle( @PRODUCT_NAME, 0, BACKGROUNDCAPTION ); 	                  
    // Enable( FULLWINDOWMODE );						   
    // Enable( BACKGROUND );							  
    // SetColor(BACKGROUND,RGB (0, 128, 128));					   

    // Added in InstallShield 15 - Show an appropriate error message if
    // -removeonly is specified and the product is not installed.
    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
    
	nSetupType = TYPICAL;
	bValidUserInput = FALSE;

Dlg_SdWelcome:
    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_SdWelcome;
    
Dlg_SdDisplayLicenseAgreement:
//End-User License Agreement
    nResult = SdLicenseEx ("", "", "", "License.rtf", TRUE);
    if (nResult = BACK) goto Dlg_SdWelcome;
	
	
Dlg_SdShowInstallationPath: 

    szTitle = "%P " + @ID_INSTALLATION_PATH_TITLE; 
    szMsg = "\n%P " + @ID_INSTALLATION_PATH_TEXT + "\n\n\n" + szProductPath;
    if (SdStartCopy2 (szTitle, szMsg) = BACK) then 
        goto Dlg_SdDisplayLicenseAgreement; 
    endif;

    if (nResult = BACK) goto Dlg_SdDisplayLicenseAgreement;


Dlg_DomainNameIpAddress:
	//show dialog to get Domain Name and IP address for the AM Web Admin website
	if (!bValidUserInput) then
		MsiSetProperty (ISMSI_HANDLE, "DOMAINNAME", "");
		MsiSetProperty (ISMSI_HANDLE, "IPADDRESS", "");
		szDomainName = "";
		szIP = "";
		szDomainNameInput = "";
		szIPInput = "";
	endif;
	nResult = SdShowDlgEdit2 ( @ID_SERVER_INFORMATION_TITLE,
		@ID_SERVER_INFORMATION_DESCRIPTION,
		@ID_DOMAIN_NAME_LABEL,
		@ID_IP_ADDRESS_LABEL,
		szDomainNameInput,
		szIPInput );
		
	RemoveSpacesFromString (szDomainNameInput, szDomainName);
	RemoveSpacesFromString (szIPInput, szIP);
	if ((!IsValidStringLength (szDomainNameInput, MIN_DOMAIN_LENGTH)) 
			|| (!IsValidStringLength (szIPInput, MIN_IP_LENGTH))) then
		bValidUserInput = FALSE;
		MessageBox (@ID_STRING_ENTER_VALID_DOMAIN_IP, WARNING);
		goto Dlg_DomainNameIpAddress;
	endif;
	MsiSetProperty (ISMSI_HANDLE, "DOMAINNAME", szDomainName);
	MsiSetProperty (ISMSI_HANDLE, "IPADDRESS", szIP);
	bValidUserInput = TRUE;
		
	if( nResult = BACK ) then
		goto Dlg_SdShowInstallationPath;
	endif;
	if (nResult < 0) then
		MessageBox ("Dlg_DomainNameIpAddress failed.", SEVERE);
	endif;

Dlg_SdStartCopy:
    szTitle = "";
    szMsg   = "";
    nResult = SdStartCopy2( szTitle, szMsg );

    if (nResult = BACK) then
       goto Dlg_DomainNameIpAddress;
    endif;

    // Added in IS 2009 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );

    // setup default status
    Enable(STATUSEX);
    
    Disable(CANCELBUTTON);
    Disable(BACKBUTTON);
 
    return 0;
end;


//---------------------------------------------------------------------------
// OnResumeUIBefore
//
// Minor Upgrades are treated as Resumed Installations by the IS UI.
// This function overrides the built-in version.
//---------------------------------------------------------------------------
function OnResumeUIBefore()
    STRING szMsg;
    NUMBER nResult;
begin
    // change the interior-dialog banner
    DialogSetInfo(DLG_INFO_ALTIMAGE, SUPPORTDIR ^ "newbanner.bmp", TRUE);
    

Dlg_Start:
    szTitle = @ID_STRING_UPGRADE_TITLE;
    szMsg   = @ID_STRING_UPGRADE_TEXT;
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_Start;
    
Dlg_SdDisplayLicenseAgreement:
//End-User License Agreement
    nResult = SdLicenseEx ("", "", "", "License.rtf", TRUE);
    if (nResult = BACK) goto Dlg_Start;
     
    Enable(STATUSEX);
    
end;


//---------------------------------------------------------------------------
// OnEnd
//
// The OnEnd event is called at the end of the setup. This event is not
// called if the setup is aborted.
//---------------------------------------------------------------------------
function OnEnd()
	STRING szExec, szArgs, szPath1, szPath2, szMsg1;
begin

	//change Tomcat8 service startup mode to Automatic
	//note space after start=
	szExec = "sc";
	szArgs = "config " + TOMCAT8_SERVICE_NAME + " start= auto";
	if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
		Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
		MessageBox(szMsg1, WARNING);
	endif;
		
    //start Tomcat8 service if not running
    szExec = "sc";
	szArgs = "start " + TOMCAT8_SERVICE_NAME;
    if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
	    Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
	    MessageBox(szMsg1, SEVERE);      
	endif;

//Cleanup();	
    
end;


//---------------------------------------------------------------------------
// OnGeneratedMSIScript
//
// The OnGeneratedMSIScript event is called just after the MSI standard
// action 'LauchConditions' is executed.
//---------------------------------------------------------------------------
function OnGeneratedMSIScript()
begin

Disable(CANCELBUTTON);
Disable(BACKBUTTON);

bFirstTimeInstall = TRUE;
szTempFolder = "C:"^"AmWebBackup";
szTargetInstallDataPath = CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AmWebApiData"^"install";


if(!REMOVEALLMODE) then


if (MAINTENANCE) then
	bFirstTimeInstall = FALSE;	
endif;

	
RetrieveDirsFromRegistry();
szJavaFullPath = szJavaHome^"bin"^"javaw.exe";


if (!bFirstTimeInstall) then


	if(Is(FILE_EXISTS, szTargetInstallDataPath^"com.absolute.am.webapi.domain.txt")) then
		ReadLineFromTextFile(szTargetInstallDataPath, "com.absolute.am.webapi.domain.txt", szDomainName);
		//MessageBox ("szDomainName retrieved from com.absolute.am.webapi.domain.txt : " + szDomainName, INFORMATION);
	else
		//hacky way of retrieving the URL of AM Web Admin website from the existing welcome.html page
		//can also use command line: appcmd list site /name:AmWebUi and parse output
		SearchForTextInFile(szProductPath^"welcome.html", "https:", szReturnLine);
		StrSub ( szMsg, szReturnLine, StrFind (szReturnLine, "https:") + 8, 200 );
		nResult = StrFind (szMsg, "/login\"");
		StrSub ( szDomainName, szMsg, 0, nResult );
		//MessageBox ("szDomainName retrieved from welcome.html : " + szDomainName, INFORMATION);
	endif;


	if (StrLengthChars(szIP) < 7) then
		if (Is(FILE_EXISTS, szTargetInstallDataPath^"com.absolute.am.webapi.ip.txt")) then
			ReadLineFromTextFile(szTargetInstallDataPath, "com.absolute.am.webapi.ip.txt", szIP);
		endif;
	endif;


    //stop Tomcat service
    szExec = "sc";
	szArgs = "stop " + TOMCAT8_SERVICE_NAME;
    if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
	    Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
	    MessageBox(szMsg1, SEVERE);
	endif;
 
 
     //stop AM Sync Service
	szArgs = "stop \"" + ABSOLUTE_SOFTWARE + " AM Sync Service\"";
    if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
	    Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
	    MessageBox(szMsg1, SEVERE);      
	endif;
	
	//delete AM Sync Service
	szArgs = "delete \"" + ABSOLUTE_SOFTWARE + " AM Sync Service\"";
    if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
	    Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
	    MessageBox(szMsg1, SEVERE);      
	endif;
	
	Delay(3);

	CreateFolder(szTempFolder);

	//TODO: read folders location from configuration file and replace hardcoded strings
	//note that we have to read the old web.xml before backup and the new web.xml before restore

	szSource =  CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AmWebApiData";
	szTarget = szTempFolder^"AmWebApiData";
	BackupFolder(szSource, szTarget);

	szSource =  CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AMSyncServices"^"Database";
	szTarget = szTempFolder^"AMSyncServices"^"Database";
	BackupFolder(szSource, szTarget);

	
	//back up the original web.xml
	szWebXmlFilePath =  szTomcat^"webapps"^"com.absolute.am.webapi"^"WEB-INF";
	szWebXmlFile = szWebXmlFilePath^"web.xml";
	if (Is(FILE_EXISTS, szWebXmlFile)) then
		szExec = "cmd";
		szArgs = "/c robocopy \"" + szWebXmlFilePath + "\" " + szTempFolder + " web.xml";	//robocopy doesn't seem like quotes around paths unless there is a space in them
		if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
			Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
			MessageBox(szMsg1, SEVERE);
			abort;
		else
			//MessageBox ("The original web.xml configuration file successfully backed up to " + szTempFolder, INFORMATION);
		endif;
	endif;


endif;

InstallProduct(bFirstTimeInstall, szDomainName, szIP);


if (!bFirstTimeInstall) then

    //stop Tomcat8 service
    szExec = "cmd";
	szArgs = "/c net stop " + TOMCAT8_SERVICE_NAME;
    if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
	    Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
	    MessageBox(szMsg1, SEVERE);      
	endif;


	szSource = szTempFolder^"AmWebApiData"^"certificates";
	szTarget = CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AmWebApiData"^"certificates";
	RestoreFolder(szSource, szTarget);
		//MessageBox ("restored folder, Source = " + szSource + "\nTarget = " + szTarget, INFORMATION);


	szSource = szTempFolder^"AmWebApiData"^"install";
	szTarget = CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AmWebApiData"^"install";
	RestoreFolder(szSource, szTarget);
		//MessageBox ("restored folder, Source = " + szSource + "\nTarget = " + szTarget, INFORMATION);


	szSource = szTempFolder^"AmWebApiData"^"settings";
	szTarget = CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AmWebApiData"^"settings";
	RestoreFolder(szSource, szTarget);
		//MessageBox ("restored folder, Source = " + szSource + "\nTarget = " + szTarget, INFORMATION);	


	szSource = szTempFolder^"AmWebApiData"^"webapidb";
	szTarget = CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AmWebApiData"^"webapidb";
	RestoreFolder(szSource, szTarget);
		//MessageBox ("restored folder, Source = " + szSource + "\nTarget = " + szTarget, INFORMATION);


	szSource = szTempFolder^"AMSyncServices"^"Database";
	szTarget = CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AMSyncServices"^"Database";
	RestoreFolder(szSource, szTarget);
		//MessageBox ("restored folder, Source = " + szSource + "\nTarget = " + szTarget, INFORMATION);	
	
	//delete actual databases as they will be re-created by sync service:
	szExec = "cmd";    
	szArgs = "/c del /S \"" + szTarget^"*.db\"";
    if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
	    Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
	    MessageBox(szMsg1, SEVERE);      
	endif;
	

	//refresh view definitions (they were overwritten by backup/restore op)
    szSource = SRCDIR^"view_config"^"*.*";
    szTargetViewConfigPath = CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AmWebApiData"^"view_config";
    if (XCopyFile (szSource, szTargetViewConfigPath, COMP_NORMAL | INCLUDE_SUBDIR) < 0) then
        MessageBox ( @ABS_ERROR_COPYING_FILES_FAILED + " view_config", SEVERE);
    else
		//MessageBox ("new view_config files successfully copied to " + szTargetViewConfigPath, INFORMATION);
    endif;
    
    //copy over configuration utility
	szSource = SRCDIR^"AmWebConfigurationUtil"^"WebConfigurationUtil.jar";
	if (XCopyFile (szSource, szTempFolder, COMP_NORMAL) < 0) then
		MessageBox ("Copying WebConfigurationUtil.jar file failed", SEVERE);
		abort;
	else
		//MessageBox ("WebConfigurationUtil.jar file successfully copied to " + szTempFolder, INFORMATION);
	endif;
    
    //restore setting from the original web.xml
    //and convert settings.txt to a new format
    szExec = "cmd";
	szArgs = "/c cd \"" + szTempFolder + "\" \& \"" + szJavaFullPath + "\" -jar WebConfigurationUtil.jar PrevWebXmlPath=\"" + szTempFolder^"web.xml\" NewWebXmlPath=\"" + szWebXmlFile + "\" SettingsFilePath=\"" + CommonAppDataFolder^ABSOLUTE_SOFTWARE^"AmWebApiData"^"settings"^"settings.txt" + "\"";
	if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then
		Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
		MessageBox(szMsg1, SEVERE);
		abort;
	endif;
    

    //start Tomcat8 service if not running
    szExec = "cmd";
	szArgs = "/c net start " + TOMCAT8_SERVICE_NAME;
    if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
	    Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
	    MessageBox(szMsg1, SEVERE);      
	endif;
	
	Delay(3);

	//clean-up temp folder
	szExec = "cmd";
	szArgs = "/c rd \"" + szTempFolder + "\" /s /q";
		//MessageBox ("Cleaning up temp folder, cmd args = " + szArgs, INFORMATION);	
	if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
		Sprintf( szMsg1, @ABS_ERROR_COMMON_LAUNCH_ERROR, szExec );
		MessageBox(szMsg1, SEVERE);      
	endif;
		//MessageBox ("Done Cleaning up temp folder: cmd " + szArgs, INFORMATION);
endif;


Delay(1);

//use default browser to open up helper page with a link to login
szExec = "cmd";
szArgs = "/c start https://" + szDomainName + "/welcome.html";
if (LaunchAppAndWait (szExec, szArgs, WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS | LAAW_OPTION_USE_SHELLEXECUTE) < 0) then 
	Sprintf( szMsg1, @ABS_MSG_COMMON_LAUNCH_ERROR, szExec );    
	MessageBox(szMsg1, SEVERE);
endif;



endif;


end;
